// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace protorpc {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_Message_2eproto();
void protobuf_BuildDesc_Message_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Message;
class DescriptorResponse;

enum Type {
  REQUEST = 1,
  RESPONSE = 2,
  RESPONSE_CANCEL = 3,
  RESPONSE_FAILED = 4,
  RESPONSE_NOT_IMPLEMENTED = 5,
  DISCONNECT = 6,
  DESCRIPTOR_REQUEST = 7,
  DESCRIPTOR_RESPONSE = 8
};
const ::google::protobuf::EnumDescriptor* Type_descriptor();
bool Type_IsValid(int value);
const Type Type_MIN = REQUEST;
const Type Type_MAX = DESCRIPTOR_RESPONSE;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protorpc.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  inline protorpc::Type type() const;
  inline void set_type(protorpc::Type value);
  
  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline ::std::string* mutable_name();
  
  // optional bytes buffer = 4;
  inline bool has_buffer() const;
  inline void clear_buffer();
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const void* value, size_t size);
  inline ::std::string* mutable_buffer();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::google::protobuf::uint32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* buffer_;
  static const ::std::string _default_buffer_;
  friend void protobuf_BuildDesc_Message_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class DescriptorResponse : public ::google::protobuf::Message {
 public:
  DescriptorResponse();
  virtual ~DescriptorResponse();
  
  DescriptorResponse(const DescriptorResponse& from);
  
  inline DescriptorResponse& operator=(const DescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DescriptorResponse& default_instance();
  void Swap(DescriptorResponse* other);
  
  // implements Message ----------------------------------------------
  
  DescriptorResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  
  // repeated .protorpc.DescriptorResponse deps = 2;
  inline int deps_size() const;
  inline void clear_deps();
  inline const ::google::protobuf::RepeatedPtrField< ::protorpc::DescriptorResponse >& deps() const;
  inline ::google::protobuf::RepeatedPtrField< ::protorpc::DescriptorResponse >* mutable_deps();
  inline const ::protorpc::DescriptorResponse& deps(int index) const;
  inline ::protorpc::DescriptorResponse* mutable_deps(int index);
  inline ::protorpc::DescriptorResponse* add_deps();
  
  // optional string serviceName = 3;
  inline bool has_servicename() const;
  inline void clear_servicename();
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline ::std::string* mutable_servicename();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* desc_;
  static const ::std::string _default_desc_;
  ::google::protobuf::RepeatedPtrField< ::protorpc::DescriptorResponse > deps_;
  ::std::string* servicename_;
  static const ::std::string _default_servicename_;
  friend void protobuf_BuildDesc_Message_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DescriptorResponse* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Message

// optional .protorpc.Type type = 1;
inline bool Message::has_type() const {
  return _has_bit(0);
}
inline void Message::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline protorpc::Type Message::type() const {
  return static_cast< protorpc::Type >(type_);
}
inline void Message::set_type(protorpc::Type value) {
  GOOGLE_DCHECK(protorpc::Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional uint32 id = 2;
inline bool Message::has_id() const {
  return _has_bit(1);
}
inline void Message::clear_id() {
  id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Message::id() const {
  return id_;
}
inline void Message::set_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  id_ = value;
}

// optional string name = 3;
inline bool Message::has_name() const {
  return _has_bit(2);
}
inline void Message::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Message::name() const {
  return *name_;
}
inline void Message::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Message::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline ::std::string* Message::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional bytes buffer = 4;
inline bool Message::has_buffer() const {
  return _has_bit(3);
}
inline void Message::clear_buffer() {
  if (buffer_ != &_default_buffer_) {
    buffer_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Message::buffer() const {
  return *buffer_;
}
inline void Message::set_buffer(const ::std::string& value) {
  _set_bit(3);
  if (buffer_ == &_default_buffer_) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Message::set_buffer(const char* value) {
  _set_bit(3);
  if (buffer_ == &_default_buffer_) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Message::set_buffer(const void* value, size_t size) {
  _set_bit(3);
  if (buffer_ == &_default_buffer_) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_buffer() {
  _set_bit(3);
  if (buffer_ == &_default_buffer_) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}

// -------------------------------------------------------------------

// DescriptorResponse

// required bytes desc = 1;
inline bool DescriptorResponse::has_desc() const {
  return _has_bit(0);
}
inline void DescriptorResponse::clear_desc() {
  if (desc_ != &_default_desc_) {
    desc_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DescriptorResponse::desc() const {
  return *desc_;
}
inline void DescriptorResponse::set_desc(const ::std::string& value) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DescriptorResponse::set_desc(const char* value) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DescriptorResponse::set_desc(const void* value, size_t size) {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DescriptorResponse::mutable_desc() {
  _set_bit(0);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  return desc_;
}

// repeated .protorpc.DescriptorResponse deps = 2;
inline int DescriptorResponse::deps_size() const {
  return deps_.size();
}
inline void DescriptorResponse::clear_deps() {
  deps_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::protorpc::DescriptorResponse >&
DescriptorResponse::deps() const {
  return deps_;
}
inline ::google::protobuf::RepeatedPtrField< ::protorpc::DescriptorResponse >*
DescriptorResponse::mutable_deps() {
  return &deps_;
}
inline const ::protorpc::DescriptorResponse& DescriptorResponse::deps(int index) const {
  return deps_.Get(index);
}
inline ::protorpc::DescriptorResponse* DescriptorResponse::mutable_deps(int index) {
  return deps_.Mutable(index);
}
inline ::protorpc::DescriptorResponse* DescriptorResponse::add_deps() {
  return deps_.Add();
}

// optional string serviceName = 3;
inline bool DescriptorResponse::has_servicename() const {
  return _has_bit(2);
}
inline void DescriptorResponse::clear_servicename() {
  if (servicename_ != &_default_servicename_) {
    servicename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DescriptorResponse::servicename() const {
  return *servicename_;
}
inline void DescriptorResponse::set_servicename(const ::std::string& value) {
  _set_bit(2);
  if (servicename_ == &_default_servicename_) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void DescriptorResponse::set_servicename(const char* value) {
  _set_bit(2);
  if (servicename_ == &_default_servicename_) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline ::std::string* DescriptorResponse::mutable_servicename() {
  _set_bit(2);
  if (servicename_ == &_default_servicename_) {
    servicename_ = new ::std::string;
  }
  return servicename_;
}


}  // namespace protorpc
#endif  // PROTOBUF_Message_2eproto__INCLUDED
