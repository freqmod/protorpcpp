project(protorpcpp)

cmake_minimum_required(VERSION 2.6)
set(QT_MIN_VERSION "4.4.0")
SET(QT_USE_QTCORE true)
SET(QT_USE_QTNETWORK true)
SET(QT_USE_QTSQL true)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(MacroLibrary)
include(FindQt4)
include(FindProtobuf)
include(${QT_USE_FILE})
include(UsePkgConfig)

if(PROTOBUF_FOUND)
ELSE (PROTOBUF_FOUND)
	MESSAGE(FATAL_ERROR "Could not find libprotobuf headers")
ENDIF (PROTOBUF_FOUND)
IF(QT4_FOUND)
ELSE (QT4_FOUND)
	MESSAGE(FATAL_ERROR "Could not find QT4")
ENDIF (QT4_FOUND)

# qclientold
set(qtproject_SRCS  twowaystream.cpp threadtool.cpp simplerpccontroller.cpp prototools.cpp protorpcpp.cpp Message.pb.cc callentry.cpp streamcallbackinfo.cpp twowayrpccontroller.cpp twowaystream.h simplerpccontroller.h simplerpccontroller.cpp testserversideservice.cpp test/test.pb.cc) 
set(qtproject_HDRS)
QT4_AUTOMOC(  twowaystream.h simplerpccontroller.h)
#SET(qtproject_UIS slimemain.ui slimeplayermain.ui)
#QT4_WRAP_UI(qtproject_UIS_H ${qtproject_UIS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${QT_INCLUDE_DIR}  ${PROTOBUF_INCLUDE} )

add_executable(protorpcpp_test ${qtproject_SRCS} ${qtproject_UIS_H} )
target_link_libraries(protorpcpp_test ${QT_LIBRARIES} ${PROTOBUF_LIBRARY} )
